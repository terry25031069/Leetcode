{"id":887353979,"question_id":98,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1674980816,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/887353979/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"22 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> ansa;\n    void dfs(TreeNode* root){\n        if(root){\n            dfs(root->left);\n            ansa.push_back(root->val);\n            dfs(root->right);\n        }\n    }\n    bool isValidBST(TreeNode* root) {\n        dfs(root);\n        auto ansb = ansa;\n        sort(ansb.begin(), ansb.end());\n        for(int i = 0; i < ansb.size() - 1; i++){\n            if(ansb[i] == ansb[i + 1]) return false;\n        }\n        // for(int i: ansa) cout << i << ' '; cout << endl;\n        // for(int i: ansb) cout << i << ' '; cout << endl;\n        return ansb == ansa;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree","has_notes":false,"flag_type":1}