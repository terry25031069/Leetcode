{"id":916929696,"question_id":208,"lang":"cpp","lang_name":"C++","time":"12Â months","timestamp":1679066224,"status":10,"status_display":"Accepted","runtime":"114 ms","url":"/submissions/detail/916929696/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"47.4 MB","code":"class TrieNode{\n    public:\n        char c;\n        unordered_map<char, TrieNode*> m;\n    TrieNode(){}\n    TrieNode(char ch){c = ch;}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word) {\n        word += 'X';\n        TrieNode* tmp = root;\n        for(auto ch: word){\n            if((tmp->m)[ch] == NULL) (tmp->m)[ch] = new TrieNode(ch);\n            tmp = (tmp->m)[ch];\n        }\n    }\n    \n    bool search(string word) {\n        TrieNode* tmp = root;\n        for(auto ch: word){\n            if((tmp->m)[ch] == NULL) return false;\n            tmp = (tmp->m)[ch];\n        }\n        if((tmp->m)['X'] == NULL && (tmp->m).size()) return false;\n        return true;\n    }\n    \n    bool startsWith(string prefix) {\n        TrieNode* tmp = root;\n        for(auto ch: prefix){\n            if((tmp->m)[ch] == NULL) return false;\n            tmp = (tmp->m)[ch];\n        }\n        return true;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}