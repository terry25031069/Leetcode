{"id":961455962,"question_id":1171,"lang":"cpp","lang_name":"C++","time":"9 months, 2 weeks","timestamp":1685602644,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/961455962/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"20.1 MB","code":"class Solution {\npublic:\n    struct node{\n        int x, y, step;\n        node(int xx, int yy, int s):x(xx), y(yy), step(s){}\n    };\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        queue<node> q;\n        if(grid[0][0]) return -1;\n        q.push({0, 0, 1}); \n        grid[0][0] = 1;\n        int dx[] = {-1,-1,-1,0,1,1,1,0}, dy[] = {-1,0,1,1,1,0,-1,-1};\n        while(!q.empty()){\n            node tmp = q.front(); q.pop();\n            if(tmp.x == grid.size() - 1 && tmp.y == grid[0].size() - 1) return tmp.step;\n            for(int k = 0; k < 8; k++){\n                int nx = tmp.x + dx[k], ny = tmp.y + dy[k];\n                if(nx > -1 && nx < grid.size() && ny > -1 && ny < grid[0].size() \n                     && !grid[nx][ny]){\n                    cout << nx << ' ' << ny << endl;\n                    if(nx == grid.size() - 1 && ny == grid[0].size() - 1) return tmp.step + 1;\n                    q.push({nx, ny, tmp.step + 1});\n                    grid[nx][ny] = 1;\n                }\n            }\n        }\n        return -1;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"flag_type":1}