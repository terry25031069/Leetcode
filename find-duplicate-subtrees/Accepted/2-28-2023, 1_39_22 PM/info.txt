{"id":906309175,"question_id":652,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1677562762,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/906309175/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"34 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    map<string, int> m;\n    vector<TreeNode*> ans;\n    string dfs(TreeNode* root){\n        if(!root){\n            return \"X\";\n        }else{\n            string s = dfs(root->left) + \"/\" + dfs(root->right) + \"/\" + to_string(root->val);\n            m[s]++;\n            if(m[s] == 2)ans.push_back(root);\n            return s;\n        }\n    }\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        dfs(root);\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}