{"id":916197527,"question_id":106,"lang":"cpp","lang_name":"C++","time":"12Â months","timestamp":1678962402,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/916197527/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"26.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic: \n    TreeNode* build(vector<int>& inorder, vector<int>& postorder, int istart, int iend, int pstart, int pend, unordered_map<int, int>& idx){\n        if(istart > iend || pstart > pend) return NULL;\n        int rootVal = postorder[pend];\n        TreeNode* root = new TreeNode(rootVal);\n        int rootidx = idx[rootVal];\n        int leftSize = rootidx - istart;\n        root->left = build(inorder, postorder, istart, rootidx - 1, pstart, pstart + leftSize - 1, idx);\n        root->right = build(inorder, postorder, rootidx + 1, iend, pstart + leftSize, pend - 1, idx);\n        return root;\n    }\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        unordered_map<int, int> idx;\n        for(int i = 0; i < inorder.size(); i++) idx[inorder[i]] = i;\n        return build(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size()-1, idx);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}