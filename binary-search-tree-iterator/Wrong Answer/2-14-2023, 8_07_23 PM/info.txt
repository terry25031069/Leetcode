{"id":897819217,"question_id":173,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1676376443,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/897819217/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    int idx = -1;\n    vector<int> v;\n    void dfs(TreeNode* root){\n        if(root){\n            dfs(root->left);\n            v.push_back(root->val);\n            dfs(root->right);\n        }\n    }\n    \n    BSTIterator(TreeNode* root) {\n        dfs(root);\n    }\n\n    int next() {\n        idx++;\n        return v[idx];\n    }\n    \n    bool hasNext() {\n        return idx < v.size() - 1;\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1000000000000000000000000000000000000000000000000000000000000","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}