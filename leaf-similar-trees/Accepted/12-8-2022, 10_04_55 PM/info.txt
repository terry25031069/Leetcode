{"id":856655749,"question_id":904,"lang":"cpp","lang_name":"C++","time":"1 year, 3 months","timestamp":1670508295,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/856655749/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"13.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void dfs(TreeNode* root, vector<int> &ans){\n        if(root->left) dfs(root->left, ans);\n        if(root->right) dfs(root->right, ans);\n        if(!root->left && !root->right) ans.push_back(root->val); \n    }\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        vector<int>d1, d2;\n        dfs(root1, d1), dfs(root2, d2);\n        if(d1.size() != d2.size()) return false;\n        for(int i: d1) cout << i << ' '; cout << endl;\n        for(int i: d2) cout << i << ' '; cout << endl;\n        for(int i = 0; i < d1.size(); i++){\n            if(d1[i] != d2[i]) return false;\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}