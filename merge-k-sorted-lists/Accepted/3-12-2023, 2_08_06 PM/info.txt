{"id":913645062,"question_id":23,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1678601286,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/913645062/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"14.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        ListNode *ans, *head; \n        if(lists.size() == 0) return NULL;\n        using pil = pair<int, ListNode*>;\n        vector<pil> v;\n        for(auto i: lists){\n            while(i) v.push_back({i->val, i}), i = i->next;\n        }\n        if(!v.size()) return NULL;\n        sort(v.begin(), v.end(), [](pil a, pil b){\n            return a.first < b.first;\n        });\n        for(int i = 0; i < v.size() - 1; i++){\n            v[i].second->next = v[i+1].second;\n        }\n        v[v.size() - 1].second->next = NULL;\n        return v[0].second;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}