{"id":918440083,"question_id":211,"lang":"cpp","lang_name":"C++","time":"11 months, 4 weeks","timestamp":1679278803,"status":10,"status_display":"Accepted","runtime":"1807 ms","url":"/submissions/detail/918440083/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"543.4 MB","code":"class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool isWord;\n    \n    TrieNode() {\n        isWord = false;\n    }\n};\n\nclass WordDictionary {\nprivate:\n    TrieNode* root;\n\npublic:\n    WordDictionary() {\n        root = new TrieNode();\n    }\n\n    void addWord(string word) {\n        TrieNode* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word[i];\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->isWord = true;\n    }\n\n    bool search(string word) {\n        return searchHelper(root, word, 0);\n    }\n\n    bool searchHelper(TrieNode* node, string& word, int index) {\n        if (index == word.length()) return node->isWord;\n        char c = word[index];\n        if (c == '.') {\n            for (auto& p : node->children) {\n                if (searchHelper(p.second, word, index + 1)) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            if (node->children.find(c) == node->children.end()) {\n                return false;\n            }\n            TrieNode* child = node->children[c];\n            return searchHelper(child, word, index + 1);\n        }\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}