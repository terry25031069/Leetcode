{"id":925129466,"question_id":1555,"lang":"cpp","lang_name":"C++","time":"11 months, 2 weeks","timestamp":1680227491,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/925129466/","is_pending":"Not Pending","title":"Number of Ways of Cutting a Pizza","memory":"N/A","code":"class Solution {\npublic:\n    int ways(vector<string>& pizza, int k) {\n        \n    }\n};class Solution {\npublic:\n    int ways(vector<string>& pizza, int k) {\n        int m = pizza.size(), n = pizza[0].size();\n        // dp[k][r][c] represents the number of ways to cut the remaining pizza into k pieces\n        // starting from row r and column c\n        vector<vector<vector<int>>> dp(k, vector<vector<int>>(m, vector<int>(n, -1)));\n        // preSum[r][c] is the total number of apples in pizza[r:][c:]\n        vector<vector<int>> preSum(m+1, vector<int>(n+1, 0));\n        // Compute preSum using dynamic programming, starting from the bottom-right corner of the pizza\n        for (int r = m - 1; r >= 0; r--)\n            for (int c = n - 1; c >= 0; c--)\n                preSum[r][c] = preSum[r][c+1] + preSum[r+1][c] - preSum[r+1][c+1] + (pizza[r][c] == 'A' ? 1 : 0);\n        // Start the recursive function dfs with initial parameters\n        // m = number of rows, n = number of columns, k = number of pieces we need to cut the pizza into,\n        // r = row index where we start cutting, c = column index where we start cutting\n        return dfs(m, n, k-1, 0, 0, dp, preSum);\n    }\n    \n    // Recursive function to compute the number of ways to cut the remaining pizza into k pieces\n    int dfs(int m, int n, int k, int r, int c, vector<vector<vector<int>>>& dp, vector<vector<int>>& preSum) {\n        // If the remaining piece has no apple, then it is an invalid cut and we return 0\n        if (preSum[r][c] == 0) return 0;\n        // If we have found a valid way to cut the pizza into k pieces, then we return 1\n        if (k == 0) return 1;\n        // If the dp array already contains the number of ways to cut the remaining pizza into k pieces\n        // starting from row r and column c, then we return the value from the dp array\n        if (dp[k][r][c] != -1) return dp[k][r][c];\n        int ans = 0;\n        // Cut the pizza horizontally at position nr if the upper piece contains at least one apple\n        for (int nr = r + 1; nr < m; nr++) \n            if (preSum[r][c] - preSum[nr][c] > 0) \n                ans = (ans + dfs(m, n, k - 1, nr, c, dp, preSum)) % 1000000007;\n        // Cut the pizza vertically at position nc if the left piece contains at least one apple\n        for (int nc = c + 1; nc < n; nc++) \n            if (preSum[r][c] - preSum[r][nc] > 0)\n                ans = (ans + dfs(m, n, k - 1, r, nc, dp, preSum)) % 1000000007;\n        return dp[k][r][c] = ans;\n    }\n};","compare_result":null,"title_slug":"number-of-ways-of-cutting-a-pizza","has_notes":false,"flag_type":1}