{"id":913280999,"question_id":109,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1678549428,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/913280999/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"28.4 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* constructBST(ListNode *leftHead, ListNode *rightHead) {\n        if (leftHead == rightHead) return NULL;\n        ListNode *slow = leftHead, *fast = leftHead;\n        while (fast != rightHead && fast->next != rightHead) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        TreeNode *root = new TreeNode(slow->val);\n        root->left = constructBST(leftHead, slow);\n        root->right = constructBST(slow->next, rightHead);\n        return root;\n    }\n    TreeNode* sortedListToBST(ListNode* head) {\n        if (!head) return NULL;\n        if (!head->next) {\n            TreeNode *root = new TreeNode(head->val);\n            return root;\n        }\n        return constructBST(head, NULL);\n    }\n};\n","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"flag_type":1}