{"id":1182068988,"question_id":1121,"lang":"cpp","lang_name":"C++","time":"2 weeks, 6 days","timestamp":1708526796,"status":10,"status_display":"Accepted","runtime":"226 ms","url":"/submissions/detail/1182068988/","is_pending":"Not Pending","title":"Partition Array for Maximum Sum","memory":"10.9 MB","code":"class Solution {\npublic:\n    int maxSumAfterPartitioning(vector<int>& arr, int k) {\n        int n = arr.size();\n        vector<int> dp(n, 0); dp[0] = arr[0];\n        for(int i = 1; i < n; i++){\n            for(int j = 1; j <= k; j++){\n                int curMax = *max_element(arr.begin() + i - j + 1, arr.begin() + i + 1);\n                if(i - j == -1){\n                    dp[i] = max(dp[i], j * curMax);\n                    break;\n                }\n                dp[i] = max(dp[i], dp[i-j] + j * curMax);\n            }\n            //cout << dp[i] << ' ';\n        }\n        return dp.back();\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"partition-array-for-maximum-sum","has_notes":false,"flag_type":1}