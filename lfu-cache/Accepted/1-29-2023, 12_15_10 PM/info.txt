{"id":887240647,"question_id":460,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1674965710,"status":10,"status_display":"Accepted","runtime":"542 ms","url":"/submissions/detail/887240647/","is_pending":"Not Pending","title":"LFU Cache","memory":"179.6 MB","code":"class LFUCache {\npublic:\n    unordered_map<int, list<int>> freq_list;\n    unordered_map<int, tuple<int, int, list<int>::iterator>> cache;\n    int min_freq;\n    int cache_cap;\n    \n    LFUCache(int capacity) {\n        cache_cap = capacity;\n    }\n    \n    void update_freq(int key) {\n        int& freq = std::get<1>(cache[key]);\n        list<int>::iterator& itr = std::get<2>(cache[key]);\n        \n        freq_list[freq].erase(itr);\n        if (freq_list[freq].empty() && min_freq == freq)\n            min_freq++;\n        \n        freq = freq + 1;\n        itr = freq_list[freq].insert(freq_list[freq].begin(), key);\n    }\n    \n    int get(int key) {\n        if (cache.count(key) == 0)\n            return -1;\n        \n        update_freq(key);\n        \n        return std::get<0>(cache[key]);\n    }\n    \n    void put(int key, int value) {\n        if (cache_cap <= 0)\n            return;\n        \n        if (cache.count(key)) {\n            update_freq(key);\n            std::get<0>(cache[key]) = value;\n            return;\n        }\n        \n        if (cache.size() == cache_cap) {\n            cache.erase(freq_list[min_freq].back());\n            freq_list[min_freq].pop_back();\n        }\n    \n        min_freq = 1;\n        freq_list[min_freq].push_front(key);\n        cache[key] = make_tuple( value, min_freq, freq_list[min_freq].begin() ); \n    }\n};","compare_result":"11111111111111111111111111","title_slug":"lfu-cache","has_notes":false,"flag_type":1}