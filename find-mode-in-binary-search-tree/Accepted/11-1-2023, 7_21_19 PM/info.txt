{"id":1089056692,"question_id":501,"lang":"cpp","lang_name":"C++","time":"4 months, 1 week","timestamp":1698837679,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1089056692/","is_pending":"Not Pending","title":"Find Mode in Binary Search Tree","memory":"26 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void dfs(TreeNode* root, map<int, int> &m){\n        if(root){\n            m[root->val] += 1;\n            dfs(root->left, m);\n            dfs(root->right, m);\n        }\n    }\n    vector<int> findMode(TreeNode* root) {\n        map<int, int> m;\n        vector<int> ans;\n        dfs(root, m);\n        int ma = 0;\n        for(auto [k, v]: m){\n            if(ma < v){\n                ma = v;\n                ans.clear(), ans.push_back(k);\n            }else if(ma == v){\n                ans.push_back(k);\n            }\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111","title_slug":"find-mode-in-binary-search-tree","has_notes":false,"flag_type":1}