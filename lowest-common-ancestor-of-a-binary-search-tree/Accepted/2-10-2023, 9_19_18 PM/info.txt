{"id":895334536,"question_id":235,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1676035158,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/895334536/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(!root) return NULL;\n        if(root->val == p->val || root->val == q->val) return root;\n        int m = root->val, l = p->val, r = q->val;\n        if(l > r) swap(l, r);\n        if(l < root->val && root->val < r) return root;\n        else if(r < root->val) return lowestCommonAncestor(root->left, p, q);\n        else if(root->val < l) return lowestCommonAncestor(root->right, p, q);\n        else return NULL; \n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}