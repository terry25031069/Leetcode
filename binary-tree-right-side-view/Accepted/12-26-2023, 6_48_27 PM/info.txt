{"id":1128795803,"question_id":199,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1703587707,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1128795803/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"12.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> ans;\n    void dfs(TreeNode* root, int depth){\n        if(ans.size() == depth) ans.push_back(-101);\n        if(ans[depth] == -101) ans[depth] = root->val;\n        if(root->right) dfs(root->right, depth + 1);\n        if(root->left) dfs(root->left, depth + 1);\n    }\n    vector<int> rightSideView(TreeNode* root) {\n        if(!root) return {};\n        dfs(root, 0);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}