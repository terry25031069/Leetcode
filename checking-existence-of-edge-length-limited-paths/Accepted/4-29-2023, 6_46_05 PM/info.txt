{"id":941498128,"question_id":1815,"lang":"cpp","lang_name":"C++","time":"10 months, 2 weeks","timestamp":1682765165,"status":10,"status_display":"Accepted","runtime":"692 ms","url":"/submissions/detail/941498128/","is_pending":"Not Pending","title":"Checking Existence of Edge Length Limited Paths","memory":"109.6 MB","code":"class UnionFind {\n    vector<int> parent;\npublic:\n    UnionFind(int n) : parent(n) {\n        iota(begin(parent), end(parent), 0);\n    }\n    void connect(int a, int b) {\n        int x = find(a), y = find(b);\n        if (x == y) return;\n        parent[x] = y;\n    }\n    bool connected(int i, int j) { return find(i) == find(j); }\n    int find(int a) {\n        return parent[a] == a ? a : (parent[a] = find(parent[a]));\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& edges, vector<vector<int>>& queries) {\n        vector<bool> ans(queries.size());\n        for (int i = 0; i < queries.size(); ++i) queries[i].push_back(i);\n        sort(begin(queries), end(queries), [&](auto &a, auto &b) { return a[2] < b[2]; });\n        sort(begin(edges), end(edges), [&](auto &a, auto &b) { return a[2] < b[2]; });\n        UnionFind uf(n);\n        int i = 0;\n        for (auto &q : queries) { \n            int u = q[0], v = q[1], limit = q[2], qid = q[3];\n            for (; i < edges.size() && edges[i][2] < limit; ++i) uf.connect(edges[i][0], edges[i][1]); \n            ans[qid] = uf.connected(u, v);\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111","title_slug":"checking-existence-of-edge-length-limited-paths","has_notes":false,"flag_type":1}