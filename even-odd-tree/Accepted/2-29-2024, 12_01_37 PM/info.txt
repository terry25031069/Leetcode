{"id":1189302910,"question_id":1731,"lang":"cpp","lang_name":"C++","time":"1 week, 5 days","timestamp":1709179297,"status":10,"status_display":"Accepted","runtime":"757 ms","url":"/submissions/detail/1189302910/","is_pending":"Not Pending","title":"Even Odd Tree","memory":"190.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> tree;\n    void dfs(TreeNode* root, int level){\n        if(!root) return;\n        if(tree.size() == level){\n            tree.push_back({});\n        }\n        tree[level].push_back(root->val);\n        dfs(root->left, level + 1);\n        dfs(root->right, level + 1);\n    }\n    bool isEvenOddTree(TreeNode* root) {\n        dfs(root, 0);\n        for(int i = 0; i < tree.size(); i++){\n            if(i&1) tree[i].push_back(0);\n            else tree[i].push_back(1000001);\n        }\n        for(int i = 0; i < tree.size(); i++){\n            for(int j = 0; j < tree[i].size() - 1; j++){\n                if((i & 1) ^ !(tree[i][j] & 1)) return false;\n                if((!(i & 1)) && (tree[i][j] >= tree[i][j+1]) || (i & 1) && (tree[i][j] <= tree[i][j+1])){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"even-odd-tree","has_notes":false,"flag_type":1}