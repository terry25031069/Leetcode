{"id":896025942,"question_id":1229,"lang":"cpp","lang_name":"C++","time":"1Â year","timestamp":1676134301,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/896025942/","is_pending":"Not Pending","title":"Shortest Path with Alternating Colors","memory":"N/A","code":"class Solution {\npublic:\n    using pii = pair<int, int>;\n    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {\n        vector<vector<int>> re(n), be(n);\n        for(auto v: redEdges) re[v[0]].push_back(v[1]);\n        for(auto v: blueEdges) be[v[0]].push_back(v[1]);\n        vector<int> ans(n, 1e8); ans[0] = 0;\n        queue<pii> q; q.push({0, -1});\n        while(!q.empty()){\n            pii t = q.front(); q.pop();\n            if(t.second != 0){\n                for(auto e: re[t.first]){\n                    if(ans[e] == 1e8){\n                        ans[e] = ans[t.first] + 1;\n                        q.push({e, 0});\n                    }\n                }\n            }\n            if(t.second != 1){\n                for(auto e: be[t.first]){\n                    if(ans[e] == 1e8){\n                        ans[e] = ans[t.first] + 1;\n                        q.push({e, 1});\n                    }\n                }\n            }\n        }\n        for(auto &i: ans){\n            if(i == 1e8) i = -1;\n        }\n        return ans;\n    }\n};","compare_result":"111110111111111101111001011111010111111110111100101000111111110010110010100000100000000000","title_slug":"shortest-path-with-alternating-colors","has_notes":false,"flag_type":1}