{"id":915721810,"question_id":998,"lang":"cpp","lang_name":"C++","time":"12Â months","timestamp":1678894145,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/915721810/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"11.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool ans = 1;\n    vector<vector<int>> v;\n    void dfs(TreeNode* root, int depth){\n        if(depth >= v.size()) v.push_back({});\n        if(root){\n            if(root->val){\n                if(v[depth].size() > 0 && v[depth].back() == -1){ans = 0; return;}\n                v[depth].push_back(root->val);\n            }\n            dfs(root->left, depth + 1);\n            dfs(root->right, depth + 1);\n        } else v[depth].push_back(-1);\n    }\n    bool isCompleteTree(TreeNode* root) {\n        dfs(root, 0);\n        // for(auto sv: v){\n        //     for(auto e: sv) cout << e << ' ';\n        //     cout << endl;\n        // }\n        if(ans){\n            for(int i = 0; i < v.size(); i++){\n                if((1 << i) != v[i].size()){\n                    if(i != v.size() - 1) return false;\n                }\n            }\n            return true;\n        }\n        else return false;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false,"flag_type":1}