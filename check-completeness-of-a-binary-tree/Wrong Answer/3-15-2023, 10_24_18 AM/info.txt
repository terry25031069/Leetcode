{"id":915367971,"question_id":998,"lang":"cpp","lang_name":"C++","time":"12Â months","timestamp":1678847058,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/915367971/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool ans = 1;\n    int dfs(TreeNode* root, int depth){\n        if(root){\n            if(!root->left && !root->right) return depth;\n            if(!root->left && root->right){\n                ans = 0;\n                return 0;\n            }\n            int ldepth = dfs(root->left, depth+1);\n            int rdepth = -1;\n            if(root->right) rdepth = dfs(root->right, depth+1);\n            if(ldepth < rdepth){\n                ans = 0;\n                return 0;\n            }\n            return max(ldepth, rdepth);\n        }\n        return 0;\n    }\n    bool isCompleteTree(TreeNode* root) {\n        dfs(root, 0);\n        return ans;\n    }\n};","compare_result":"111111111100111111111111110111110111100111111001111010011111111101011101101111110001010010100101001010010100101001010100","title_slug":"check-completeness-of-a-binary-tree","has_notes":false,"flag_type":1}