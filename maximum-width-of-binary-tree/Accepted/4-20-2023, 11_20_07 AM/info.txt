{"id":936682217,"question_id":662,"lang":"cpp","lang_name":"C++","time":"10 months, 3 weeks","timestamp":1681960807,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/936682217/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"17.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if (root == nullptr) {\n            return 0;\n        }\n        \n        int max_width = 1;\n        queue<pair<TreeNode*, int>> q;\n        q.push({root, 0});\n        \n        while (!q.empty()) {\n            int level_size = q.size();\n            int start_index = q.front().second;\n            int end_index = q.back().second;\n            max_width = max(max_width, end_index - start_index + 1);\n            \n            for (int i = 0; i < level_size; ++i) {\n                auto node_index_pair = q.front();\n                TreeNode* node = node_index_pair.first;\n                int node_index = node_index_pair.second - start_index;\n                q.pop();\n                \n                if (node->left != nullptr) {\n                    q.push({node->left, 2LL * node_index + 1});\n                }\n                \n                if (node->right != nullptr) {\n                    q.push({node->right, 2LL * node_index + 2});\n                }\n            }\n        }\n        \n        return max_width;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}