{"id":936678587,"question_id":662,"lang":"cpp","lang_name":"C++","time":"10 months, 3 weeks","timestamp":1681960140,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/936678587/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> v;\n    void dfs(TreeNode* root, int n, int lvl){\n        if(v.size() <= lvl) v.push_back({});\n        if(root){\n            v[lvl].push_back(n);\n            dfs(root->left, n * 2, lvl + 1);\n            dfs(root->right, n * 2 + 1, lvl + 1);\n        }\n    }\n    int widthOfBinaryTree(TreeNode* root) {\n       dfs(root, 1, 0);\n       int ans = 0;\n       for(auto sv: v){\n           if(sv.size()) ans = max(ans, *max_element(sv.begin(), sv.end()) - *min_element(sv.begin(), sv.end()));\n       }\n       return ans + 1;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}