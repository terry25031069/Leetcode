{"id":941822150,"question_id":1701,"lang":"cpp","lang_name":"C++","time":"10 months, 2 weeks","timestamp":1682816020,"status":10,"status_display":"Accepted","runtime":"570 ms","url":"/submissions/detail/941822150/","is_pending":"Not Pending","title":"Remove Max Number of Edges to Keep Graph Fully Traversable","memory":"138.4 MB","code":"class Solution {\npublic:\n    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {\n        // Union find\n        vector<int> rootA(n + 1);\n        vector<int> rootB(n + 1);\n        for (int i = 1; i <= n; i++) {\n            rootA[i] = i;\n            rootB[i] = i;\n        }\n\n        int res = 0;\n        int aliceEdges = 0;\n        int bobEdges = 0;\n\n        // Alice and Bob\n        for (auto& edge : edges) {\n            if (edge[0] == 3) {\n                if (uni(edge[1], edge[2], rootA)) {\n                    aliceEdges++;\n                    if (uni(edge[1], edge[2], rootB)) {\n                        bobEdges++;\n                    }\n                } else {\n                    res++;\n                }\n            }\n        }\n\n        vector<int> rootA_copy = rootA;\n\n        // only Alice\n        for (auto& edge : edges) {\n            if (edge[0] == 1) {\n                if (uni(edge[1], edge[2], rootA)) {\n                    aliceEdges++;\n                } else {\n                    res++;\n                }\n            }\n        }\n\n        // only Bob\n        rootA = rootA_copy;\n        for (auto& edge : edges) {\n            if (edge[0] == 2) {\n                if (uni(edge[1], edge[2], rootB)) {\n                    bobEdges++;\n                } else {\n                    res++;\n                }\n            }\n        }\n\n        return (aliceEdges == bobEdges && aliceEdges == n - 1) ? res : -1;\n    }\n\n    bool uni(int a, int b, vector<int>& root) {\n        int rootA = find(a, root);\n        int rootB = find(b, root);\n        if (rootA == rootB) {\n            return false;\n        }\n        root[rootA] = rootB;\n        return true;\n    }\n\n    int find(int a, vector<int>& root) {\n        if (root[a] != a) {\n            root[a] = find(root[a], root);\n        }\n        return root[a];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-max-number-of-edges-to-keep-graph-fully-traversable","has_notes":false,"flag_type":1}