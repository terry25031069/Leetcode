{"id":877379155,"question_id":2364,"lang":"cpp","lang_name":"C++","time":"1 year, 1 month","timestamp":1673607667,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/877379155/","is_pending":"Not Pending","title":"Longest Path With Different Adjacent Characters","memory":"189.3 MB","code":"class Solution {\npublic:\n    using pii = pair<int, int>;\n    vector<vector<int>> v;\n    string s;\n    int ans = 0;\n    pii dfs(int root){\n        pii p = {0, 0};\n        for(auto i: v[root]){\n            if(s[i] != s[root]){\n                int tmp = dfs(i).first + 1;\n                if(tmp > p.first) p.second = p.first, p.first = tmp;\n                else if(tmp > p.second) p.second = tmp;\n            }else{\n                dfs(i);\n            }\n        }\n        ans = max(ans, p.first + p.second + 1);\n       // cout << root << ' ' << p.first << ' ' << p.second << endl;\n        return p;\n    }\n    int longestPath(vector<int>& parent, string ss) {\n        v.resize(parent.size());\n        s = ss;\n        for(int i = 1; i < parent.size(); i++){\n            v[parent[i]].push_back(i);\n        }\n        pii p = dfs(0);\n        ans = max(ans, p.first + p.second + 1);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-path-with-different-adjacent-characters","has_notes":false,"flag_type":1}